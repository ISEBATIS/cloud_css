/*
Devoir 2 : Boucles & Invariants

Ce fichier vaut 20/20.

Rappel des consignes gÃ©nÃ©rales de soumission :
----------------------------------------------

- Vous pouvez Ã©crire des commentaires, comme vous le feriez dans un code C ;
- Hors des commentaires, n'utilisez que des cractÃ¨res ASCII ;
- Respectez scrupuleusement les consignes de soumissions pour ne pas recevoir
  une cote nulle ;
- NE PAS TOUCHER AUX CARACTÃˆRES '#'. Ils sont placÃ©s aux bons endroits. Faites
  en sorte de ne pas les inclure dans un commentaire...
- Utilisez un Ã©diteur de texte qui permet la coloration de la syntaxe du C
  (gedit sur linux, notepad++ sur windows, Atom, ...)

Consignes spÃ©cifiques Ã  ce devoir :
-----------------------------------

La maniÃ¨re exacte de spÃ©cifier les Ã©lÃ©ments complÃ©tant les Invariants est
dÃ©taillÃ©e dans l'Ã©noncÃ©. Veuillez vous y reporter pour de plus amples
informations.

CONSEIL :
Ouvrez ce fichier dans Atom (ou autre), activez la coloration syntaxique du C,
ainsi que la mise en Ã©vidence des parenthÃ¨ses correspondantes pour ne pas vous
tromper.
*/
/*
Invariant du SP1 : Afficher N lignes du carrÃ©
________________________________________________________________________________

Indiquez aprÃ¨s ce commentaire vos huit choix, comme indiquÃ© dans l'Ã©noncÃ©
(numÃ©ro de boite, suivi d'un point, suivi de la valeur numÃ©rique ou du nom de
variable/constante de votre choix (pour les boites 1 Ã  4 et 6 Ã  7) ou dâ€™un nombre
entre 1 et 6 correspondant Ã  votre choix pour les boite 5 et 8).

Pour votre facilitÃ©, les six numÃ©ros de boite et les points sont dÃ©jÃ  indiquÃ©s.
Respectez l'ordre croissant des numÃ©ros de boite.
*/
1. 1
2. i-1
3. i
4. N
5. 5
6. 1
7. i-1
8. 2
/* Encodez votre rÃ©ponse Ã  l'invariant du SP1 ci-dessus */
#
/*
Fonction de terminaison du SP1 : Afficher N lignes du carrÃ©
________________________________________________________________________________

Indiquez, aprÃ¨s ce commentaire, l'expressions C qui dÃ©crit la valeur que prend
votre fonction de terminaison
*/

N - (i - 1)

/* Indiquez ci-dessus votre fonction de terminaison pour le SP1 */
#
/*
Invariant du SP2 : Ã‰crire, sur une ligne, N colonnes
________________________________________________________________________________

Indiquez aprÃ¨s ce commentaire vos dix choix, comme indiquÃ© dans l'Ã©noncÃ©
(numÃ©ro de boite, suivi d'un point, suivi de la valeur numÃ©rique ou du nom de
variable/constante de votre choix (pour les boites 1 Ã  4, 6, 8 et 9) ou dâ€™un
nombre entre 1 et 6 correspondant Ã  votre choix pour les boites 5, 7 et 10).

Pour votre facilitÃ©, les dix numÃ©ros de boite et les points sont dÃ©jÃ  indiquÃ©s.
Respectez l'ordre croissant des numÃ©ros de boite.
*/
1. 1
2. j-1
3. j
4. N
5. 5
6. i
7. 3
8. 1
9. j-1
10. 2
/* Encodez votre rÃ©ponse Ã  l'invariant du SP2 ci-dessus */
#
/*
Fonction de terminaison du SP2 : Ã‰crire, sur une ligne, N colonnes
________________________________________________________________________________

Indiquez, aprÃ¨s ce commentaire, l'expressions C qui dÃ©crit la valeur que prend
votre fonction de terminaison
*/

N - (j - 1)

/* Indiquez ci-dessus votre fonction de terminaison pour le SP2 */
#
/*
Indiquez aprÃ¨s ce commentaire votre code.

Dans la suite, vous ne devez Ã©crire QUE ce qui, selon vous, devrait remplacer la
 ligne "votre code viendra ici (variables + instructions)" dans le squelette
 mentionnÃ© dans l'Ã©noncÃ©.

VOUS NE DEVEZ SURTOUT PAS :
- Ajouter une ligne "#include <stdio.h>" ;
- Ã‰crire "int main(){" ni la '}' qui ferme celle ouverte aprÃ¨s 'main' ;
- RedÃ©clarer N. Cette constante est DÃ‰JÃ€ dÃ©clarÃ©e. Si vous
  la redÃ©clarez, la compilation et l'Ã©valuation de votre code sera impossible.

Voici un exemple pour N=3, tel qu'il devrait apparaitre
sur la sortie standard suite Ã  l'exÃ©cution de votre code :
O X O
X O X
O X O
*/

int i = 1, j;
while(i<=N){
    j=1;
    while(j<=N){
        if(j == i || j == N - i + 1){
            printf("O ");
        }
        else printf("X ");
        j++;
    }
    printf("\n");
    i++;
}


/* Indiquez ci-dessus votre extrait de code. */
